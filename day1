problem:1

int subtractProductAndSum(int n){
    int sum=0,rem;
    int p=1,f;
    while(n!=0)
    {
        rem=n%10;
        sum+=rem;
        p*=rem;
        n=n/10;
    }
    f=p-sum;
    return f;

}

problem 2:



int* selfDividingNumbers(int left, int right, int* returnSize)

{

    int i,rem,flag,q=0,a[right],k;
    for(i=left;i<=right;i++)
    {
    flag=0;
         k=i;
        while(k!=0)
        {
            rem=k%10;
            if( rem==0 || i%rem!=0)
            {
                flag++;
            }
            k/=10;
        }

        if(flag==0)
        {
            a[q]=i;
            q++;
        }
    }
     *returnSize=q;
    int* arr=malloc(sizeof(int)*q);
    for(i=0;i<q;i++)
     {
        arr[i]=a[i];
    }
    return arr;

}


problem 3:



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize)
{
    int d=0,i,top=0,down=matrixSize-1,left=0,right=*matrixColSize-1,q=0;
    *returnSize=matrixSize*(*matrixColSize);
    int* a=(int *)malloc(sizeof(int)*(*returnSize));
    while(top<=down && left<=right)
    {
        if(d==0)
        {
            for(i=left;i<=right;i++)
            {
                a[q]=matrix[top][i];
                q++;
            }
            top++;
        }
        else if(d==1)
        {
            for(i=top;i<=down;i++)
            {
                a[q]=matrix[i][right];
                q++;
            }
            right-=1;
        }
        else if(d==2)
        {
            for(i=right;i>=left;i--)
            {
                a[q]=matrix[down][i];
                q++;
            }
            down-=1;
        }
        else if(d==3)
        {
            for(i=down;i>=top;i--)
            {
                a[q]=matrix[i][left];
                q++;
            }
            left++;
        }
        d=(d+1)%4;
    }
    return a;
}
Day 2:

problem3:

#include<stdio.h>
#include<string.h>
int main()
{
	int i,j,n;
	scanf("%d",&n);
	char s[n][14];
	for(i=0;i<n;i++)
	{
		scanf("%s",&s[i]);
	}
	for(i=0;i<n;i++)
	{
	int k=strlen(s[i]),q=0;
	char b[k],m;
	for(j=k-1;j>=0;j--)
	{
		b[q]=s[i][j];
		if(j== (k/2))
		{
			m=b[q];
		}
		q++;
	}
	for(j=i+1;j<n;j++)
	{
	if(strcmp(b,s[j]) == 0)
		{
			printf("%d ",k);
			printf("%c",m);
			break;
		}
	}}
	
}


DAY 2: 
problem :1
//address sanitiser isssue while performing in leetcode but tried in online compiler with as many as inputs got corrrect ans. 

#include<stdio.h>
#include<string.h>
int main()
{
    int i,j,k,s1,s2,c=0;
    char address[20];
    scanf("%s",address);
    s1=strlen(address);
    for(i=0;i<s1;i++)
    {
        if(address[i]=='.')
        {
            c++;
        }
    }
    s2=s1+(2*c);
    char add[s2];
                     i=0;
                     j=0;
    while(j<s1)
        {
            if(address[j]=='.')
                {
                    add[i]='[';
                    add[i+1]='.';
                    add[i+2]=']';
                    i+=3;
                    j++;
                    
                }
                else
                {
                    add[i]=address[j];
                    i++;j++;
                }
            }
    for(i=0;i<s2;i++)
    {
        printf("%c",add[i]);
    }
}

Day 7:

problem 1:


int minMoves(int* nums, int numsSize)
{
    int i,j,temp;
    int k=nums[0];
    for(i=1;i<numsSize;i++)
    {
        if(nums[i]<k)
        {
            k=nums[i];
        }
    }
   int sum=0;
    for(i=0;i<numsSize;i++)
    {
        sum+=nums[i]-k;
    }
    return sum;
}

problem 3:



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* plusOne(int* digits, int digitsSize, int* returnSize)
{
    *returnSize=digitsSize;
    int i;
    int* arr=(int*)malloc(sizeof(int)*(digitsSize+1));
    int* arr1=(int*)malloc(sizeof(int)*(digitsSize+1));
    int sum=0;
    for(i=0;i<digitsSize;i++)
    {
        sum=sum*10+digits[i];
    }
    sum++;
    int rem,q=0,p=0;
    while(sum!=0)
    {
        rem=sum%10;
        arr[q]=rem;
        sum/=10;
        q++;
    }
    for(i=q-1;i>=0;i--)
    {
        arr1[p]=arr[i];
        p++;
    }
    return arr1;
}


problem 5:



bool isPowerOfTwo(int n)
{
    int i,flag=0;
    for(i=0;i<100;i++)
    {
        if(n==pow(2,i))
        {
            flag=1;
        }
    }
    if(flag==1)
    {
        return true;
    }
    else{return false;}
}
